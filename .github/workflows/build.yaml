on: [push, workflow_dispatch]

env:
  TOOLS_URL: https://github.com/mmatyas/pegasus-frontend/releases/download/alpha1
  QT_VERSION: qt5152
  QT_VERSION_PRETTY: "5.15.2"


jobs:
  x11-tests:
    runs-on: ubuntu-18.04
    env:
      QT_TARGET: x11-static
    steps:
      - name: APT deps
        run: sudo apt-get update && sudo apt-get install -y
          libasound-dev
          libgl1-mesa-dev
          libgstreamer-plugins-base1.0-dev
          libpulse-dev
          libudev-dev
          libxi-dev
          libxkbcommon-dev
          libxkbcommon-x11-dev
          libxcb-icccm4-dev
          libxcb-image0-dev
          libxcb-keysyms1-dev
          libxcb-render-util0-dev
          libxcb-util-dev
          libxcb-xinerama0-dev
          libsdl2-dev
          libzstd-dev
          lcov
          ruby
          xvfb
      - name: Get Qt
        run: |
          curl -L "${TOOLS_URL}/${QT_VERSION}_${QT_TARGET}.tar.xz" | sudo tar xJf - -C /opt/
          curl -L "${TOOLS_URL}/apng_patched_headers.tar.xz" | sudo tar xJf - -C "/opt/${QT_VERSION}_${QT_TARGET}/include/"
          /opt/${QT_VERSION}_${QT_TARGET}/bin/qmake --version

      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - run: git fetch --tags

      - name: Lint QML
        run: |
          find -name *.qml -exec /opt/${QT_VERSION}_${QT_TARGET}/bin/qmllint {} \;

      - run: mkdir build
      - name: Build and measure
        working-directory: build
        run: |
          export QT_HOSTDIR=/opt/${QT_VERSION}_${QT_TARGET}
          xvfb-run -a ../.travis/script__build_with_lcov.sh
      - name: Send to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/coverage.clean


  macos-static:
    runs-on: macos-10.15
    env:
      QT_TARGET: macos-static
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - run: git fetch --tags

      - name: Get Qt
        run: |
          curl -L "${TOOLS_URL}/${QT_VERSION}_${QT_TARGET}.tar.xz" | sudo tar xJ - -C /usr/local/
          curl -L "${TOOLS_URL}/apng_patched_headers.tar.xz" | sudo tar xJf - -C "/usr/local/Qt-${QT_VERSION_PRETTY}/include/"
          /usr/local/Qt-${QT_VERSION_PRETTY}/bin/qmake --version
      - name: Get SDL2
        run: curl -L "${TOOLS_URL}/sdl-2010_macos.txz" | sudo tar xJ - -C /usr/local/

      - run: mkdir build
      - name: Configure
        working-directory: build
        run: /usr/local/Qt-${QT_VERSION_PRETTY}/bin/qmake ..
          USE_SDL_GAMEPAD=1
          USE_SDL_POWER=1
          ENABLE_APNG=1
          SDL_LIBS='-L/usr/local/SDL2-2.0.10/lib -lSDL2 -lm -liconv -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit'
          SDL_INCLUDES=/usr/local/SDL2-2.0.10/include/SDL2
          QMAKE_CFLAGS=-D_THREAD_SAFE
          QMAKE_CXXFLAGS=-D_THREAD_SAFE
      - name: Build
        working-directory: build
        run: make
      - name: Test
        working-directory: build
        run: make check

      - name: Prepare artifacts
        run: |
          strip -x build/src/app/Pegasus.app/Contents/MacOS/pegasus-fe
          mkdir staging
          cp -r build/src/app/Pegasus.app staging/
          cp README.md staging/
          cp LICENSE.md staging/
          mkdir deploy
          export ZIPNAME="pegasus-fe_$(git describe --always)_${QT_TARGET}.zip"
          cd staging
          zip -r "../deploy/${ZIPNAME}" ./*
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-static
          path: deploy
      - name: Deploy
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: mmatyas/pegasus-deploy-staging
          personal_token: ${{ secrets.PEGASUS_GHACTIONS_TOKEN }}
          publish_branch: continuous-macos-static
          publish_dir: ./deploy
          force_orphan: true
